       OPCODE COMPRESSO, FORMATO

bit a 1 significano azione richiesta, se tutti i bit a 0, richiesto synchronize.
_
1| Spostamento
2| Creazione
3| Cancellazione
4| Permessi
5| Move dir
6| Version change
7| List
8| Scrittura
-

Nella richiesta i parametri dei vari comandi sono scritti IN SERIE, nell'ordine dei bit.
L'header delle richieste è composto da i dati di autenticazione (username, hash(password)) seguito da:
- OPCODE (8bit)
- TIMESTAMP per ogni operazione, anche nel caso non serva (8x64 bit)
- FILE_ID (32 bit)
- Gli argomenti in ordine, per ogni operazione

Le operazioni svolte dal protocollo sono:
- Client si connette.
//- Server invia subito salt (32 bit)
- Client invia richiesta e contemporaneamente aspetta acknowledge da parte del server
- Server chiude connessione nel caso di login errato
- Server esegue le richieste e invia ack. Gli ack possono essere raggruppati tranquillamente 
	(il server invia una serie di ack sottoforma di OPCODE mask)
- Server restituisce 0 nel caso non riesca a eseguire qualche operazione (in quel caso tutta la transazione fallisce)
- Se il Client riceve acknowledge prima di aver terminato l'invio, interrompe l'invio dei dati (solo per la scrittura)

Il log nel client viene scritto solo nel momento della ricezione di un acknowledge.

*********** Bisognerebbe comunque usare TSL...

====== PACCHETTI DI OPERAZIONE ======
Tutti i pacchetti iniziano con un numero (32 bit) che indica la lunghezza del campo (utile per saltare senza interpretare in caso
la transazione sia già presente).

<size><data>

== Spostamento ==
Solo una stringa

== Creazione == 
<'f'/'d'><Nome>

== Cancellazione ==
EMPTY

== Permessi ==
16bit di permessi, unix-like

== Timestamp ==
64bit di timestamp unix

== Version change ==
EMPTY

== Modifier (directory/file | list/insert version) ==

== Scrittura ==
<size><binary data>
